# Docker Compose for OpenTelemetry Observability Stack
version: '3.8'

services:
  # Jaeger - Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.51
    container_name: jaeger
    ports:
      - "16686:16686"   # Jaeger UI
      - "14268:14268"   # HTTP collector
      - "6831:6831/udp" # UDP agent
      - "6832:6832/udp" # UDP agent (compact)
      - "5778:5778"     # Config server
      - "14250:14250"   # gRPC collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    networks:
      - otel-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.89.0
    container_name: otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Prometheus metrics
      - "8889:8889"   # Prometheus scrape config
      - "13133:13133" # Health check
    depends_on:
      - jaeger
    networks:
      - otel-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:13133/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    depends_on:
      - otel-collector
    networks:
      - otel-network
    restart: unless-stopped

  # Grafana - Visualization
  grafana:
    image: grafana/grafana:10.2.0
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
      - jaeger
    networks:
      - otel-network
    restart: unless-stopped

  # Example Flask Application
  flask-app:
    build:
      context: .
      dockerfile: examples/Dockerfile.flask
    container_name: flask-example
    ports:
      - "5000:5000"
    environment:
      - OTEL_SERVICE_NAME=flask-example-docker
      - OTEL_EXPORTER_TYPE=otlp
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_DEPLOYMENT_ENVIRONMENT=docker
      - FLASK_ENV=development
    depends_on:
      - otel-collector
    networks:
      - otel-network
    restart: unless-stopped

  # Example FastAPI Application
  fastapi-app:
    build:
      context: .
      dockerfile: examples/Dockerfile.fastapi
    container_name: fastapi-example
    ports:
      - "8000:8000"
    environment:
      - OTEL_SERVICE_NAME=fastapi-example-docker
      - OTEL_EXPORTER_TYPE=otlp
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_DEPLOYMENT_ENVIRONMENT=docker
    depends_on:
      - otel-collector
    networks:
      - otel-network
    restart: unless-stopped

volumes:
  prometheus_data:
  grafana_data:

networks:
  otel-network:
    driver: bridge 