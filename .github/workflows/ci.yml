name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Main test job for stable Python version (3.9 only)
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,all]"
    
    - name: Lint with flake8
      run: |
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Type check with mypy
      run: mypy src/
    
    - name: Test with pytest
      run: pytest tests/ -v --cov=otel_tracer --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Core functionality test with minimal dependencies (stable version only)
  core-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install core dependencies only
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest
    
    - name: Test core functionality
      run: pytest tests/test_core.py -v

  # Experimental Python 3.10 test (allowed to fail)
  test-python-310:
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,all]"
    
    - name: Test with pytest
      run: pytest tests/ -v

  # Experimental Python 3.11 test (allowed to fail)
  test-python-311:
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,all]"
    
    - name: Test with pytest
      run: pytest tests/ -v

  # Experimental Python 3.12 test (allowed to fail)
  test-python-312:
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,all]"
    
    - name: Test with pytest
      run: pytest tests/ -v

  # Security scan
  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run security checks
      run: |
        bandit -r src/
        safety check

  # Build test
  build:
    runs-on: ubuntu-latest
    needs: [test, core-test]  # Only depend on stable tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  # Test summary job
  test-summary:
    runs-on: ubuntu-latest
    needs: [test, core-test, security, build]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        echo "Test Results Summary:"
        echo "Main tests (Python 3.9): ${{ needs.test.result }}"
        echo "Core tests (Python 3.9): ${{ needs.core-test.result }}"
        echo "Security: ${{ needs.security.result }}"
        echo "Build: ${{ needs.build.result }}"
        
        if [[ "${{ needs.test.result }}" == "failure" || "${{ needs.core-test.result }}" == "failure" ]]; then
          echo "Critical tests failed!"
          exit 1
        fi
        
        echo "All critical tests passed!"
        echo ""
        echo "Experimental test results (allowed to fail):"
        echo "Python 3.10: ${{ needs.test-python-310.result || 'not run' }}"
        echo "Python 3.11: ${{ needs.test-python-311.result || 'not run' }}"
        echo "Python 3.12: ${{ needs.test-python-312.result || 'not run' }}"

  # Publish to PyPI (only on tags)
  publish:
    runs-on: ubuntu-latest
    needs: [test-summary]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload dist/* 